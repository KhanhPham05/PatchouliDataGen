plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "6.13.0"
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.0.0'
group = 'io.github.realyusufismail' //used for maven publishing
archivesBaseName = 'patchoulidatagen'


ext {
    dev_id = 'yusuf'
    dev_name = 'Yusuf Ismail'
    dev_email = 'yusufgamer222@gmail.com'
    dev_organization = 'RealYusufIsmail'
    dev_organizationUrl = 'https://github.com/RealYusufIsmail'

    dev2_id = 'KhanhPham05'
    dev2_name = 'KhanhTypo'
    dev2_email = 'null'
    dev2_organization = 'KhanhPham05'
    dev2_organizationUrl = 'https://github.com/KhanhPham05'

    gpl_name = 'MIT License'
    gpl_url = 'https://github.com/KhanhPham05/PatchouliDataGen/blob/master/LICENSE'

    // Make sure we have a default for initial configuration evaluation
    isReleaseVersion = false
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.12.18-1.19.3'
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                patchoulidatagen {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                patchoulidatagen {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            //for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'patchoulidatagen', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                patchoulidatagen {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { url 'https://maven.blamejared.com' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.0'

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.3-78:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.3-78")


    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

}

spotless {
    java {
        // Excludes build folder since it contains generated java classes.
        targetExclude("build/**")
        eclipse('4.19.0').configFile("${rootProject.rootDir}/meta/formatting/google-style-eclipse.xml")
    }
}

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    // Makes spotlessApply task run on every compile/build.
    dependsOn 'spotlessApply'

    // Nails the Java-Version of every Subproject
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "patchoulidatagen",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

javadoc {
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
        logging.captureStandardError LogLevel.INFO
        logging.captureStandardOutput LogLevel.INFO
    }

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

afterEvaluate { project ->
    ext.isReleaseVersion = !version.endsWith("RELEASE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            //artifactId = project.artifactId // or maybe archiveBaseName?
            from components.java
            pom {
                name = project.archivesBaseName
                description = project.description
                url = "https://github.com/RealYusufIsmail/YDW"
                packaging = "jar"

                licenses {
                    license {
                        name = "${gpl_name}"
                        url = "${gpl_url}"
                    }
                }
                developers {
                    developer {
                        id = "${dev_id}"
                        name = "${dev_name}"
                        email = "${dev_email}"
                        organization = "${dev_organization}"
                        organizationUrl = "${dev_organizationUrl}"
                    }
                    developer {
                        id = "${dev2_id}"
                        name = "${dev2_name}"
                        email = "${dev2_email}"
                        organization = "${dev2_organization}"
                        organizationUrl = "${dev2_organizationUrl}"
                    }
                }
                scm {
                    connection = 'https://github.com/RealYusufIsmail/YDW.git'
                    developerConnection = 'scm:git:ssh://git@github.com/RealYusufIsmail/YDW.git'
                    url = 'github.com/YusufsDiscordbot/YDL'
                }
            }
        }
    }
    repositories {
        maven {
            afterEvaluate { project ->
                def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
                url = (isReleaseVersion) ? releaseRepo : snapshotRepo

                //println "repos: " + version
                //println "repos: " + isReleaseVersion
                //println url

                credentials {
                    username = project.hasProperty('MAVEN_USERNAME') ? ossrhUsername : "Unknown user"
                    password = project.hasProperty('MAVEN_USERNAME') ? ossrhPassword : "Unknown password"
                }
            }
        }
    }
}

signing {
    afterEvaluate { project ->
        //println "sign: " + version
        //println "sign: " + isReleaseVersion
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }
}